#pragma version 7
txna ApplicationArgs 0
method "create_app(uint64,byte[80],byte[32])void"
==
bnz main_l8
txna ApplicationArgs 0
method "submit(uint64,byte[80])void"
==
bnz main_l7
txna ApplicationArgs 0
method "get(uint64,byte[])byte[]"
==
bnz main_l6
txna ApplicationArgs 0
method "must_get(uint64,byte[])byte[]"
==
bnz main_l5
err
main_l5:
txn OnCompletion
int NoOp
==
txn ApplicationID
int 0
!=
&&
assert
txna ApplicationArgs 1
btoi
store 11
txna ApplicationArgs 2
store 12
load 11
load 12
callsub mustget_14
store 13
byte 0x151f7c75
load 13
concat
log
int 1
return
main_l6:
txn OnCompletion
int NoOp
==
txn ApplicationID
int 0
!=
&&
assert
txna ApplicationArgs 1
btoi
store 5
txna ApplicationArgs 2
store 6
load 5
load 6
callsub get_13
store 7
byte 0x151f7c75
load 7
concat
log
int 1
return
main_l7:
txn OnCompletion
int NoOp
==
txn ApplicationID
int 0
!=
&&
assert
txna ApplicationArgs 1
btoi
store 3
txna ApplicationArgs 2
store 4
load 3
load 4
callsub submit_12
int 1
return
main_l8:
txn OnCompletion
int NoOp
==
txn ApplicationID
int 0
==
&&
assert
txna ApplicationArgs 1
btoi
store 0
txna ApplicationArgs 2
store 1
txna ApplicationArgs 3
store 2
load 0
load 1
load 2
callsub createapp_11
int 1
return

// get_vrf_round_from_round
getvrfroundfromround_0:
store 27
load 27
int 7
+
int 8
/
int 8
*
retsub

// get_slot_from_round
getslotfromround_1:
store 26
load 26
callsub getvrfroundfromround_0
int 8
/
int 189
%
int 3
/
retsub

// get_cell_from_round
getcellfromround_2:
store 28
load 28
callsub getvrfroundfromround_0
int 8
/
int 189
%
int 3
%
retsub

// put_stored_vrf_output
putstoredvrfoutput_3:
store 24
store 23
load 24
len
int 32
==
assert
load 23
callsub getslotfromround_1
itob
store 25
load 25
load 25
app_global_get
load 24
load 23
callsub getcellfromround_2
callsub updateslotwithnewvrfoutput_4
app_global_put
retsub

// update_slot_with_new_vrf_output
updateslotwithnewvrfoutput_4:
store 31
store 30
store 29
load 31
int 0
==
bnz updateslotwithnewvrfoutput_4_l6
load 31
int 1
==
bnz updateslotwithnewvrfoutput_4_l5
load 31
int 2
==
bnz updateslotwithnewvrfoutput_4_l4
err
updateslotwithnewvrfoutput_4_l4:
load 29
extract 0 64
load 30
concat
b updateslotwithnewvrfoutput_4_l7
updateslotwithnewvrfoutput_4_l5:
load 29
extract 0 32
load 30
concat
load 29
extract 64 32
concat
b updateslotwithnewvrfoutput_4_l7
updateslotwithnewvrfoutput_4_l6:
load 30
load 29
extract 32 64
concat
updateslotwithnewvrfoutput_4_l7:
retsub

// verify_vrf
verifyvrf_5:
store 34
store 33
store 32
load 32
itob
load 32
block BlkSeed
concat
sha512_256
load 33
load 34
vrf_verify VrfAlgorand
store 36
store 35
load 36
int 1
==
assert
load 35
extract 0 32
retsub

// verify_and_store_vrf
verifyandstorevrf_6:
store 22
store 21
store 20
load 20
load 20
load 21
load 22
callsub verifyvrf_5
callsub putstoredvrfoutput_3
retsub

// get_random_output
getrandomoutput_7:
store 45
store 44
load 44
callsub getslotfromround_1
itob
app_global_get
int 32
load 44
callsub getcellfromround_2
*
int 32
extract3
load 44
itob
concat
load 45
concat
sha3_256
retsub

// init_global_state
initglobalstate_8:
store 38
store 37
int 0
store 39
initglobalstate_8_l1:
load 39
int 63
<
bz initglobalstate_8_l3
load 39
itob
byte "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
app_global_put
load 39
int 1
+
store 39
b initglobalstate_8_l1
initglobalstate_8_l3:
byte ""
load 37
itob
load 37
itob
concat
load 38
concat
app_global_put
retsub

// is_round_in_valid_range
isroundinvalidrange_9:
store 46
load 46
callsub getvrfroundfromround_0
byte ""
app_global_get
int 0
extract_uint64
<=
load 46
callsub getvrfroundfromround_0
byte ""
app_global_get
int 8
extract_uint64
>=
&&
retsub

// is_valid_recovering_round
isvalidrecoveringround_10:
store 43
load 43
int 8
%
int 0
==
load 43
byte ""
app_global_get
int 0
extract_uint64
int 8
+
>
&&
load 43
int 1000
+
global Round
int 16
+
<=
&&
retsub

// create_app
createapp_11:
store 19
store 18
store 17
load 17
int 8
%
int 0
==
assert
load 19
len
int 32
==
assert
load 17
load 19
callsub initglobalstate_8
load 17
load 18
load 19
callsub verifyandstorevrf_6
retsub

// submit
submit_12:
store 41
store 40
byte ""
app_global_get
int 0
extract_uint64
int 8
+
load 40
==
load 40
callsub isvalidrecoveringround_10
||
assert
load 40
callsub isvalidrecoveringround_10
store 42
load 40
load 41
byte ""
app_global_get
extract 16 32
callsub verifyandstorevrf_6
byte ""
load 40
itob
byte ""
app_global_get
int 8
extract_uint64
itob
concat
byte ""
app_global_get
extract 16 32
concat
app_global_put
load 42
bnz submit_12_l3
byte ""
app_global_get
int 0
extract_uint64
byte ""
app_global_get
int 8
extract_uint64
-
int 1512
>=
bz submit_12_l4
byte ""
byte ""
app_global_get
int 0
extract_uint64
itob
byte ""
app_global_get
int 0
extract_uint64
int 1504
-
itob
concat
byte ""
app_global_get
extract 16 32
concat
app_global_put
b submit_12_l4
submit_12_l3:
byte ""
byte ""
app_global_get
int 0
extract_uint64
itob
load 40
itob
concat
byte ""
app_global_get
extract 16 32
concat
app_global_put
submit_12_l4:
retsub

// get
get_13:
store 9
store 8
load 8
callsub isroundinvalidrange_9
!
bnz get_13_l2
load 8
load 9
extract 2 0
callsub getrandomoutput_7
store 10
load 10
len
itob
extract 6 0
load 10
concat
store 10
b get_13_l3
get_13_l2:
byte ""
store 10
load 10
len
itob
extract 6 0
load 10
concat
store 10
get_13_l3:
load 10
retsub

// must_get
mustget_14:
store 15
store 14
load 14
callsub isroundinvalidrange_9
assert
load 14
load 15
extract 2 0
callsub getrandomoutput_7
store 16
load 16
len
itob
extract 6 0
load 16
concat
store 16
load 16
retsub